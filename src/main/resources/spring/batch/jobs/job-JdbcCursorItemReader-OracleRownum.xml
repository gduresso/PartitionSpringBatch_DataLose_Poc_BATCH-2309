<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<import resource="../config/context.xml" />
	<import resource="../config/database.xml" />

	<batch:job id="jdbcCursorItemReader-OracleRownumJOB" restartable="false"
		incrementer="idIncrementer">
		<batch:step id="stepPartitioner">
			<partition step="step1" partitioner="rangePartitioner">
				<handler grid-size="${batch.numThreads}" task-executor="taskExecutor" />
			</partition>
		</batch:step>
	</batch:job>

	<bean id="rangePartitioner" class="com.victorjabur.springbatch.partitioner.ColumnRangePartitioner">
		<property name="dataSource" ref="batchDataSource" />
		<property name="table" value="TABLE_SOURCE" />
		<property name="column" value="ID" />
	</bean>

	<bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />

	<batch:step id="step1" xmlns="http://www.springframework.org/schema/batch">
		<batch:tasklet transaction-manager="transactionManager">
			<batch:chunk reader="jdbcItemReader" writer="jdbcCompositeWriter"
				processor="itemProcessor" commit-interval="${batch.commitInterval}">
			</batch:chunk>
		</batch:tasklet>
	</batch:step>

	<bean id="itemProcessor" class="com.victorjabur.springbatch.processor.CustomItemProcessor" />
	<bean id="RecordRowMapper" class="com.victorjabur.springbatch.rowmapper.RecordRowMapper" />

	<bean id="jdbcItemReaderParent"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		abstract="true">
		<property name="dataSource" ref="batchDataSource" />
		<property name="saveState" value="false" />
		<property name="fetchSize" value="${batch.fetchSize}" />
		<property name="rowMapper" ref="RecordRowMapper" />
	</bean>

	<bean id="jdbcItemReader" scope="step" autowire-candidate="false" parent="jdbcItemReaderParent">
		<property name="sql">
			<value>
			<![CDATA[
			SELECT TMP.*
			FROM (SELECT ID, DESCRIPTION, FLAG_PROCESSED, ROWNUM AS ID_PAGINATION FROM TABLE_SOURCE WHERE FLAG_PROCESSED='N' ORDER BY ID) TMP
			WHERE TMP.ID_PAGINATION >= ? AND TMP.ID_PAGINATION <= ?
			]]>
			</value>
		</property>
		<property name="preparedStatementSetter">
			<bean
				class="org.springframework.batch.core.resource.ListPreparedStatementSetter">
				<property name="parameters">
					<list>
						<value>#{stepExecutionContext['minValue']}</value>
						<value>#{stepExecutionContext['maxValue']}</value>
					</list>
				</property>
			</bean>

		</property>
	</bean>

	<bean id="jdbcCompositeWriter"
		class="org.springframework.batch.item.support.CompositeItemWriter">
		<property name="delegates">
			<list>
				<ref bean="jdbcItemWriterTargetTable" />
				<ref bean="jdbcItemWriterFlagProcessed" />
			</list>
		</property>
	</bean>

	<bean id="jdbcItemWriterTargetTable"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true" />
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
		<property name="dataSource" ref="batchDataSource" />
		<property name="sql"
			value="insert into TABLE_TARGET(ID, DESCRIPTION) values(:id, :description)" />
	</bean>

	<bean id="jdbcItemWriterFlagProcessed"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true" />
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
		<property name="dataSource" ref="batchDataSource" />
		<property name="sql"
			value="update  TABLE_SOURCE
					set    FLAG_PROCESSED='S'
					where  Id=:id" />
	</bean>
</beans>